#include "MedalsDB.h"


MedalsDB::MedalsDB() {
  hTable = vector<vector<DataEntry*>>(17);

}


MedalsDB::DataEntry::DataEntry() {

  year = -1;
  country = "ZZZ";
  gold = -1;
  silver = -1;
  bronze  = -1;

}

MedalsDB::DataEntry::DataEntry(int year, string country,
          int gold, int silver, int bronze) {
  this->year = year;
  this->country = country;
  this->gold = gold;
  this->silver = silver;
  this->bronze = bronze;

}

MedalsDB::DataEntry::DataEntry(int year, string country) {
  this->year = year;
  this->country = country;
  gold = 0;
  silver = 0;
  bronze = 0;

}

void MedalsDB::DataEntry::addMedal(string medalType) {

  if (medalType == "Gold") {
    setGold(1);

  } else if (medalType == "Silver") {
    setSilver(1);

  } else {
    setBronze(1);

  }
}



// SETTERS BELOW
// SETTERS BELOW
void MedalsDB::DataEntry::setYear(int theYear) {
  year = theYear;

}

void MedalsDB::DataEntry::setString(string theCountry) {
  country = theCountry;

}

void MedalsDB::DataEntry::setGold(int theGold) {
  gold += theGold;

}

void MedalsDB::DataEntry::setSilver(int theSilver) {
  silver += theSilver;                                       

}

void MedalsDB::DataEntry::setBronze(int theBronze) {
  bronze += theBronze;

}

void MedalsDB::DataEntry::setAllMedals(int gold, int silver, int bronze) {

  setGold(gold);
  setSilver(silver);
  setBronze(bronze);

}


// GETTERS BELOW
// GETTERS BELOW
int MedalsDB::DataEntry::getYear() {
  return year;

}

string MedalsDB::DataEntry::getCountry() {
  return country;

}

int MedalsDB::DataEntry::getGold() {
  return gold;

}

int MedalsDB::DataEntry::getSilver() {
  return silver;

}

int MedalsDB::DataEntry::getBronze() {
  return bronze;

}

int MedalsDB::hashFunction(string country) {

  int length = country.length();
  int ASCII = 0;

  for (int i = 1; i < length+1; i++) {

    ASCII += i * (int)country[i-1];

  }

  return ASCII % 17;

}


// VECTOR METHODS BELOW
// VECTOR METHODS BELOW
// VECTOR METHODS BELOW
// VECTOR METHODS BELOW
// VECTOR METHODS BELOW


int MedalsDB::isValidAndStored(int hashIndex, string country) {

  int counter = 0;
  int size = (int)hTable[hashIndex].size();

  while (counter < size) {

    DataEntry* temp = hTable[hashIndex][counter];
    if (temp->getCountry() == country) {
      return counter;

    }
    counter++;

    if (counter == size) {
      return counter;

    } else {
      temp = hTable[hashIndex][counter];

    }

  }
  return -1;


}

MedalsDB::DataEntry* MedalsDB::get(int hashIndex, string country) {

  int index = isValidAndStored(hashIndex, country);

  if (index == (int)hTable[hashIndex].size() || index == -1) {
    return nullptr;

  } else {
    return hTable[hashIndex][index];

  }

}

void MedalsDB::getUserDesiredDataDisplay(string country) {

  int hashIndex = hashFunction(country);
  DataEntry* isStored = get(hashIndex, country);


  if (isStored == nullptr) {
    cout << "Sorry, the data entry for " << country << " does not exist." << endl;

  } else {

    cout << "Retrieving medals for " << country << ": "
         << isStored->getYear() << " "
         << isStored->getGold() << " gold, "
         << isStored->getSilver() << " silver, "
         << isStored->getBronze() << " bronze" << endl;

  }

}

// Return false if not stored
bool MedalsDB::remove(int hashIndex, string country) {

  int index = isValidAndStored(hashIndex, country);

  if (index == (int)hTable[hashIndex].size() || index == -1) {
    return false;

  } else {

    hTable[hashIndex].erase (hTable[hashIndex].begin() + index);
    return true;

  }

}

void MedalsDB::removeDisplay(string country) {

  int hashIndex = hashFunction(country);
  cout << "Removing data entry for " << country << "." << endl;

  if (remove(hashIndex, country)) {
    cout << "Success! Data entry has been removed." << endl;

  } else {
    cout << "Sorry, the data entry for " << country << " does not exist." << endl;

  }
}

// We can imagine our hashtable to be like a 2d vector, so when displaying the contents we will iterate though row and column
void MedalsDB::tableDisplay() {

  cout << "Hash table display:" << endl;
  int sum = 0;

  for (int row = 0; row < 17; row++) { // Our hash table is of fixed sized 17 vectors, indexes 0-16

    cout << "INDEX " << row << ":" << endl;

    for (int column = 0; column < (int)hTable[row].size(); column++) {

      DataEntry* temp = hTable[row][column];

      //PRINT FORMAT
      // COUNTRY: YEAR GOLD, SILVER, BRONZE,
      // example: HUN: 2012 412 gold, 316 silver, 351 bronze

      sum += (temp->getGold() + temp->getSilver() + temp->getBronze());
      cout << temp->getCountry() << ": " << temp->getYear() << " "
           << temp->getGold() << " gold, "
           << temp->getSilver() << " silver, "
           << temp->getBronze() << " bronze" << endl;


    } //end of column iterating loop

  } // end of row iterating loop

  cout << "Total Medals: " << sum << endl;
}

void MedalsDB::add(int year, string country, string medal) {

  int hashIndex = hashFunction(country);
  DataEntry* isStored = get(hashIndex, country);

  if (isStored == nullptr) { // Country is not currently stored

    DataEntry* temp = new DataEntry(year, country); // This does not override the stored value in our vector
    temp->addMedal(medal);
    hTable[hashIndex].push_back(temp);
    return;

  } else if (isStored->getYear() <= year) {

    isStored->addMedal(medal);
    isStored->setYear(year);
    return;

  } else {
    return;

  }

}

bool MedalsDB::add(int year, string country, int gold, int silver, int bronze) {

  int hashIndex = hashFunction(country);
  DataEntry* isStored = get(hashIndex, country);

  if (isStored == nullptr) { // Country is not currently stored

    hTable[hashIndex].push_back(new DataEntry(year, country, gold, silver, bronze));
    return true;

  } else if (isStored->getYear() <= year) {

    isStored->setAllMedals(gold, silver, bronze);
    isStored->setYear(year);
    return true;

  }

  return false;

}

void MedalsDB::addUserDataDisplay(int year, string country, int gold, int silver, int bronze) {

  if (add(year, country, gold, silver, bronze)) {
    cout << "A";

  } else {
    cout << "NOT a";

  }

  cout << "dding record " << year << ", " << country
  << ", " << gold
  << ", " << silver
  << ", " << bronze << endl;

}

void MedalsDB::addFromFile(int year, string country, string medal) {

  add(year, country, medal);

}
